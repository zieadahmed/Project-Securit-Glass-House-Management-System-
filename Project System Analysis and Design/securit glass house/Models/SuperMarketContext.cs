// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SuperMarket.Models;

public partial class SuperMarketContext : DbContext
{
    public SuperMarketContext()
    {
    }

    public SuperMarketContext(DbContextOptions<SuperMarketContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AddFavorite> AddFavorites { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Favorite> Favorites { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductOrder> ProductOrders { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Supply> Supplies { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=SuperMarket;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AddFavorite>(entity =>
        {
            entity.HasKey(e => new { e.FavoriteID, e.UserID }).HasName("PK_Add");

            entity.HasOne(d => d.Favorite).WithMany(p => p.AddFavorites)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Add_Favorites");

            entity.HasOne(d => d.Product).WithMany(p => p.AddFavorites).HasConstraintName("FK_Add_Product");

            entity.HasOne(d => d.User).WithMany(p => p.AddFavorites)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Add_User");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasOne(d => d.User).WithMany(p => p.Orders).HasConstraintName("FK_Order_User");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Product_Category");
        });

        modelBuilder.Entity<ProductOrder>(entity =>
        {
            entity.HasOne(d => d.Order).WithMany(p => p.ProductOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductOrder_Order");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductOrder_Product");
        });

        modelBuilder.Entity<Supply>(entity =>
        {
            entity.HasOne(d => d.Product).WithMany(p => p.Supplies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Supply_Product");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Supplies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Supply_Supplier");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}